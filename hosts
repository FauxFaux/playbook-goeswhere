#!/usr/bin/env python3

import collections
import json
from typing import Any, Dict, Set, Tuple

import yaml


class Host(str):
    pass


Vars = Dict[str, Any]
HostVars = Dict[Host, Vars]


class Role:
    def __init__(self):
        self.hosts = set()  # type: Set[Host]
        self.vars = {}  # type: Vars

    def to_json(self):
        return {
            'hosts': sorted(self.hosts),
            'vars': self.vars
        }


Roles = Dict[str, Role]


def gw(name: str) -> Host:
    return Host('{}.goeswhere.com'.format(name))


def hosts() -> Tuple[HostVars, Roles]:
    hostvars = {}  # type: HostVars
    roles = collections.defaultdict(Role)  # type: Roles

    for role in ['base', 'phab', 'prom']:
        roles[role].hosts.add(gw('blind'))

    roles['base'].hosts.update({gw('urika'), gw('astoria')})
    roles['owned'].hosts.update({gw('urika'), gw('blind'), gw('astoria')})

    with open('infra_spec/data/apt_ppa_keys.yml') as f:
        apt_ppa_keys = yaml.safe_load(f)['apt_ppa_keys']

    with open('infra_spec/data/apt_repositories.yml') as f:
        apt_repositories = yaml.safe_load(f)['apt_repositories']

    repos = {
        gw('astoria'): {
            'google/google-chrome',
            'google/google-musicmanager',
            'spotify',
            'steam',
            'ppa:ansible/ansible',
            'ppa:faux/jailkit',
            'ppa:ubuntu-lxc/lxd-stable',
        },
        gw('urika'): {
        },
        gw('blind'): {
            'grafana',
            'ppa:certbot/certbot',
            'ppa:faux/jailkit',
        }
    }

    for host, reps in repos.items():
        apt_keys = {}
        for rep in reps:  # type: str
            if rep.startswith('ppa:'):
                major, minor = rep[len('ppa:'):].split('/', 1)
                apt_keys['{}_ubuntu_{}'.format(major, minor)] = apt_ppa_keys[major][minor]
            elif '/' in rep:
                major, minor = rep.split('/', 1)
                apt_keys[major] = apt_repositories[major]['key']
            else:
                apt_keys[rep] = apt_repositories[rep]['key']
        hostvars[host] = {'apt_keys': apt_keys}

    return hostvars, roles


def ansible() -> Dict[str, Any]:
    hostvars, roles = hosts()
    assert '_meta' not in roles

    hvars = {}
    for name, vars in hostvars.items():
        hvars[str(name)] = vars

    ret = {'_meta': {'hostvars': hvars}}
    for name, role in roles.items():
        ret[name] = role.to_json()

    return ret


def main():
    import sys
    json.dump(ansible(), sys.stdout, sort_keys=True, indent=' ')


if '__main__' == __name__:
    main()
